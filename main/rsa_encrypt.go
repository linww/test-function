package main

import (
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"github.com/aobco/log"
	"github.com/aws/smithy-go/rand"
)

var (
	devRootPem = `-----BEGIN CERTIFICATE-----
MIIDVzCCAj+gAwIBAgIJALtdNoZDRIJQMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNV
BAYTAlhYMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0RlZmF1bHQg
Q29tcGFueSBMdGQwHhcNMjQwNzMwMDczODEzWhcNMzQwNzI4MDczODEzWjBCMQsw
CQYDVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZh
dWx0IENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
zzZ7rJUEh+pK6juNxUopSFvgaG6tqYy6+331pDGg6LPP0Lh4MhUuPxLFz5oBcmHu
rrEzyDzYX/5EjmF0q+GvPTVcQwNB1ze25XMK3NtRIRsPG+0f+tK56GMcgEqR2SUw
AKIlm7o23SSs7lJg7xINthOc5PSicRNZrUD+e0J84FhLgXZ+7tQDT0ngpnM1jOZk
7b5YUUHwH5ENvqCBuR0dQcAIWgV4ltABpO0pWTaaYBZyHDisf1KHhNDm/HMH3zyy
UUp92eVTf5zLP0INY5FQanPaBMJeY54A1RbOnAiw/opsD9tDFI39m4gOmyaAzxvJ
jzlntN22xfgM2dPbREgphQIDAQABo1AwTjAdBgNVHQ4EFgQUp1a72LYzwqZTBVTs
4H60Ok6RbEswHwYDVR0jBBgwFoAUp1a72LYzwqZTBVTs4H60Ok6RbEswDAYDVR0T
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAgm7RETl831BXhLztuuiWSWvwehhG
7ISn+qhhZLiA57ln6BRKPKMHnTX8YW5CGaFNvqem5VK6AOO7+ULvD3yNMU1qYPFD
VsraBqh3v4kABrocR1YH6oRNNyexWXpRgMFA7gs8RIzbxcjmX9z7DYcJ50Q3oXNr
DtJ9vYsi4vl18jCbXdz7bd5Uhe68Q4m9kUZyLkJHatqBELPIu4Q+45H3rPQlYhl8
TXKw2v98lYo3j0TRjOzACvuhn434W3Ow00Du5diu3uIDWxWYP11eI7iVQHvFOKTk
CJFjfTzpg9BO66xCHx6y4lNDFsSF3MduI+9hoCTDf7j/ZRRbKJEnEcV4ww==
-----END CERTIFICATE-----
`
	devRootKey = `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAzzZ7rJUEh+pK6juNxUopSFvgaG6tqYy6+331pDGg6LPP0Lh4
MhUuPxLFz5oBcmHurrEzyDzYX/5EjmF0q+GvPTVcQwNB1ze25XMK3NtRIRsPG+0f
+tK56GMcgEqR2SUwAKIlm7o23SSs7lJg7xINthOc5PSicRNZrUD+e0J84FhLgXZ+
7tQDT0ngpnM1jOZk7b5YUUHwH5ENvqCBuR0dQcAIWgV4ltABpO0pWTaaYBZyHDis
f1KHhNDm/HMH3zyyUUp92eVTf5zLP0INY5FQanPaBMJeY54A1RbOnAiw/opsD9tD
FI39m4gOmyaAzxvJjzlntN22xfgM2dPbREgphQIDAQABAoIBAQClJ6y9KmzZE7Gw
LdVaeTicNraPJh/+cm+aAZQm0XOJ5b9ugYkzidQ5a3IEfKBIlavSyuQV5gEjyZrE
zQJb+N5eb8hglRkGO57oFKCE1b09IL8TKBWEKi8I/O37hvPmWhB/gL1u+KW/7vpy
XXBrPD13cPxtNFrAu4aPY60xexXjDK1t1UeZxFph37eu1a2ndrdM0Mm1RH6sktoT
UxPnlT1AI+qxKPw4TOOuGHf3S6S4RWZ3mJ4dUblyEzZKWstmj/B7mH2+tEfoICzU
l4EGQ906XhiWJctoKmRATQcE8m+gsRZ+Q3wFAjaAGALFYwZUSPjk7sbKbDArZgUH
193VrHeFAoGBAPBmbdXeXLGfBW+P1pGmQiVnLIedUicF/DXMknTDtoNYbBA4dvyb
4COSPUv26A6ts0g/f0jqM38DX4mQXiOr26rh+vEoMDB6OzB6yIeGF7Ux9y5oBxm9
iFceNl4rSGQ7fi47ffsYQIiKGYvemLRoaQX6a9P9tIVEI62YWdd0BmP7AoGBANyo
vZ7DKLjgYRhBnGDKtZp+fM6rMUHgyXEoUTT4sEhX6qivyHmhm3L2mVmATWscaJcT
Ezbx9dZQ8yeIoQyi8m34K1cA6AyvfLi7nzpGO6B0JjkdlHg9tKRiN3pndjCqDLEG
LrONugesR2bltoCGAkQWxvtR87Jkz2zJtA2jILB/AoGAA5SC7jxxhPOpURADUgf3
1DbFIv/kyU/9gY+aXsLLZQlcEqHEo95uaBk1cHws2IsdsGXBr4RNYAbc1V+hB0b3
7oOPCShgD1jCqOYrNll44OntlHNYJ7n63dFFXgGnAlcgee/I4IRr8Zyc5Mhb3dPw
PHaORInytkldfqhWLi88KSECgYAUZMAJsU3NMGeo3z99rp50JeaRDz9hME5N2AUR
WT6poP5+Eqj7nNUKHgJ0RChjkt+Tvt6SwHARG7AtYjJIQbMYOMyAoQPRUFK9nBGO
SDlwjeuOcc5sAn/0hWNNO8yvmLfNkJ22WI3t8Z0zxF1GqZwCAPzo810Lisek7Utn
y0DVLwKBgQCLba2Bd4+aohNylP4xVf7FoJKhedINssWKW+cevdjQ8JjY7dA3ZqCn
NOa08S7NQhEJ6y+Av9KB36TR6A4vWO0MBzhgGjgttVS2ot+zYir8+15z6rjrWoKV
a7sb3Xe0azdiGQiUFHjNLsxViDcOtt7EQ6rfJMFCR/Oh0XKsR5DrpQ==
-----END RSA PRIVATE KEY-----
`
	prodRootPem = `-----BEGIN CERTIFICATE-----
MIIDVzCCAj+gAwIBAgIJAMn99CdFCYfYMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNV
BAYTAlhYMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0RlZmF1bHQg
Q29tcGFueSBMdGQwHhcNMjQwNzMwMDc0MjI2WhcNMzQwNzI4MDc0MjI2WjBCMQsw
CQYDVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZh
dWx0IENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
7ubQk/7RFUwm5ISH78oMSl8q8AeKd10dV3Bv5cKfa7QPMpgbZ9U1PiYGI0SpPyzb
qBLPHcNzESRnF0FNarP3YVkj2nNE0PtQI3AiNnHkHdc9ofZFJjJov5PHwrre/4ks
9oDsx2vq2kWPLucTIVIZeE7+pxenjARiAoPt5/bneAi2kG5cBHuHTaqe/I1/wcjS
CZtFgLEhZYauaHHTJAEH6JfQ9Ljs+3gOkNpEtyhW2BomPf39VChj57KNLLmYvEn0
YaVibGRpc2oGjLEFR4UkycYOkxvpHR+bzVTC3HQPrhMxnOhnchhkVU+xCfHuxw2w
zp61216aACENmfxSYHaiywIDAQABo1AwTjAdBgNVHQ4EFgQU1nFtyIZ67A1QQj/N
tAvUccU4eT4wHwYDVR0jBBgwFoAU1nFtyIZ67A1QQj/NtAvUccU4eT4wDAYDVR0T
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAdGw9CIAGUbWAh2rPX7d5+OhjB3/t
gIPSPut9C/MrZY2ruspcHtUEkoWBbzdXHeXvnHEsqKBwGSXNDlLls/Ir5lhaOYZL
hS0M1CBLRWMHDOJvut2kpM3UCFhnbB3bCT1rvAMZgPg717AaEJdROuL19X41+XqB
9dADn2p7TRxF5ESfJoKdLHB5JY7806oq2zcmOHTG+R1F9Bm+zfAFqGyGgQlZ5CcP
otXR875sFiKPxnkyEWDuVy9YM5utbZglIqQ9q6DXEWskF4cUC2EC0rL7dTX6iJM9
Hfvy7387IEaw6YcSRdz+la+tphzsRMl1skambPFkdU/j89LMedokRwbU7A==
-----END CERTIFICATE-----
`
	prodRootKey = `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA7ubQk/7RFUwm5ISH78oMSl8q8AeKd10dV3Bv5cKfa7QPMpgb
Z9U1PiYGI0SpPyzbqBLPHcNzESRnF0FNarP3YVkj2nNE0PtQI3AiNnHkHdc9ofZF
JjJov5PHwrre/4ks9oDsx2vq2kWPLucTIVIZeE7+pxenjARiAoPt5/bneAi2kG5c
BHuHTaqe/I1/wcjSCZtFgLEhZYauaHHTJAEH6JfQ9Ljs+3gOkNpEtyhW2BomPf39
VChj57KNLLmYvEn0YaVibGRpc2oGjLEFR4UkycYOkxvpHR+bzVTC3HQPrhMxnOhn
chhkVU+xCfHuxw2wzp61216aACENmfxSYHaiywIDAQABAoIBAQCCl7fy/rtqqfsk
tfHdOZSoXweIuIaPo13zu2nfrhkZdg9Mt+tbQihdtclrJBBkkW/tm4KOoZXYDA8y
nibkqkYTd/fqZVJ77rUq+hQpsO5jBZMSYx3/uFScTPtIzoAyLdlfUrCcfrid4qJX
oEdL0qZLptr7mimjl43AFEBLqiNz8Dj3SzfbjlLHCyCMpTt8WNWxCujVZq3Eu94z
hDL2GPtzeH9Psu+gDo23I74H5a1yzb2dBtAUkczJtfNMtbhxyy4y/nr6cZghvN9C
urnTkgOfKjhwySRhbrfWWakeuAovl50lTWnhNrJvsNbPA2y1dxoEbGN29PuL1Zhn
C2cFbzwZAoGBAPwfQWcLBhstAMHodtD6PHycSgtGKfDGWrfh3mvuXiXGib7HQuSt
g1NgGiI3E+YCBN77qNWY6nwIqWJAcJ0YOli/dXiuJsL5nr7WXrNb7Rxp1jQeOPjW
bJJFWsmsV9rGgcnIYHrNjCo6tjlKKv7hf9SZtcvpNvf5RH0ZNJSHFbf/AoGBAPKT
gMFVQMFNsLDXFDPCc24d5rSHEEgkmC4f8btqAF5Yl6p2Gp7U9D1iAOr1TWtWcVBb
gSFGpqlMbSNUUkOq1oFqB71CwaiYf+8vZM1l/wnqvwOo1ScuRi6/Ce8RExqA1zju
vr0ndKBxp8b/ZRkfM3gKIcKG5kt6RBlVlcGEIHU1AoGAVAq/LHAaSvjHZdvtr1+a
xhb6/6MV2/LizqT2FZhRvdnelL+rZrsIKcTBMWKWuXc21HWjJABjOZFRlTTR1Sv8
VxULPX0f4qJ+7jJbQwKDmZMWGi1w5FHlwyRnTQ6sAntlTDQFJSpbbMBBeftlNa1J
hT7vwNcuwZ5P3DuIsXIOJVUCgYBXWTQA6iECOmaIlzooFToZidzcXtJHGB5QZaJX
GSl+z6n1cMfPL+GvBM5NzP0OzLbK99g80kMLLYETOrbQtQC+4x5cUWCIxDk1OLy0
lajLumMD/1SZ4jjVdmcuVdiqL4DQeG/ojv+ZErQWnTqbXDfdXtCfSpI81Y8WDFJ7
t4c0jQKBgQCqZ5zFpgzpjvYYoJOUC4U0uVGWFNrs8fybosA/+rN6NUQj44zuy6p0
GRDcVKbhpOLp0XeMg7Hz6HYf5V4/AErb8a0/lLFNMH/i6kiqeNJdfavzgUNx+3jB
1lYV5FbeBJXTWcqXhiSNnQvmpFwE4wOwgyFUgLve+cN8ld0AopsZ1w==
-----END RSA PRIVATE KEY-----
`
)

func main() {
	certBlock, _ := pem.Decode([]byte(devRootPem))
	if certBlock == nil {
		log.Fatal("failed to parse certificate PEM")
	}
	cert, err := x509.ParseCertificate(certBlock.Bytes)
	if err != nil {
		log.Fatal(err)
	}

	keyBlock, _ := pem.Decode([]byte(devRootKey))
	if keyBlock == nil {
		log.Fatal("failed to parse key PEM")
	}
	privateKey, err := x509.ParsePKCS1PrivateKey(keyBlock.Bytes)
	if err != nil {
		log.Fatal(err)
	}

	text := []byte("hello, world")
	// encrypt the text
	encryptedText, err := rsa.EncryptPKCS1v15(rand.Reader, cert.PublicKey.(*rsa.PublicKey), text)
	if err != nil {
		log.Fatal(err)
	}

	// decrypt the text
	decryptedText, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, encryptedText)
	if err != nil {
		log.Fatal(err)
	}

	log.Infof("Decrypted text: %s", decryptedText)
}
